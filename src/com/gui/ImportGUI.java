/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.gui;

import com.bus.ImportBUS;
import com.bus.ImportDetailBUS;
import com.dao.ImportDAO;
import com.dao.ImportDTO;
import com.dao.ImportDetailDTO;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTable;
/**
 *
 * @author minht
 */
public class ImportGUI extends javax.swing.JPanel {
        private ArrayList<ImportDTO> impList = new ArrayList<>();
        private ArrayList<ImportDetailDTO> impDetList = new ArrayList<>();
    /**
     * Creates new form ImportGUI
     */
    public ImportGUI() throws SQLException {
        initComponents();
        
        btnAdd.setSVGImage("com/image/add.svg", 40, 40);
        btnRefresh.setSVGImage("com/image/reload.svg", 40, 40);
        btnSearch.setSVGImage("com/image/search.svg", 40, 40);
        
        ImportBUS impBUS = new ImportBUS();
        impList =impBUS.getList();
         addRowtoImportTable(impList);

    }

    public void addRowtoImportTable(ArrayList<ImportDTO> impList) throws SQLException{
        DefaultTableModel model = (DefaultTableModel) tblImport.getModel();
        model.setRowCount(0);
        Object rowData[] = new Object[4];
        for (int i = 0; i < impList.size(); i++) {
            rowData[0] = impList.get(i).getImportID();
            rowData[1] = impList.get(i).getCreatedDate();
            rowData[2] = impList.get(i).getTotalAmount();
            rowData[3] = impList.get(i).getEmployeeID();
            model.addRow(rowData);
        }
    }
        
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnHeader = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnBody = new javax.swing.JPanel();
        pnToolBar = new javax.swing.JPanel();
        btnAdd = new com.gui.SvgImage();
        btnXem = new com.gui.SvgImage();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblImport = new javax.swing.JTable();
        pnlSearch = new javax.swing.JPanel();
        tfSearch = new javax.swing.JTextField();
        btnSearch = new com.gui.SvgImage();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbTypeSearch = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        tfFrom = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfTo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnRefresh = new com.gui.SvgImage();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnHeader.setBackground(new java.awt.Color(240, 81, 25));
        pnHeader.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NHẬP HÀNG");
        jLabel1.setToolTipText("");
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setFocusable(false);
        pnHeader.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 400, 100));

        add(pnHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 100));

        pnBody.setBackground(new java.awt.Color(240, 81, 25));
        pnBody.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnToolBar.setBackground(new java.awt.Color(240, 81, 25));
        pnToolBar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAdd.setText("Add");
        pnToolBar.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 10, 40, 40));

        btnXem.setText("Xem");
        btnXem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnXemMouseClicked(evt);
            }
        });
        pnToolBar.add(btnXem, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 40, 40));

        pnBody.add(pnToolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 60));

        jScrollPane1.setBackground(new java.awt.Color(255, 102, 51));

        tblImport.setBackground(new java.awt.Color(255, 102, 51));
        tblImport.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        tblImport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ngày tạo", "Tổng tiền", "Mã nhân viên"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblImport);
        if (tblImport.getColumnModel().getColumnCount() > 0) {
            tblImport.getColumnModel().getColumn(0).setResizable(false);
            tblImport.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblImport.getColumnModel().getColumn(1).setResizable(false);
            tblImport.getColumnModel().getColumn(2).setResizable(false);
            tblImport.getColumnModel().getColumn(3).setResizable(false);
        }

        pnBody.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 700, 435));

        pnlSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnlSearch.add(tfSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 90, 325, 50));

        btnSearch.setText("Search");
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });
        pnlSearch.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 370, 40, 40));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Mã");
        pnlSearch.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 90, -1, 50));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Theo");
        pnlSearch.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 170, -1, 50));

        cbTypeSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ngày", "Tổng giá", "Không" }));
        pnlSearch.add(cbTypeSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 170, 325, 50));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Từ");
        pnlSearch.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 240, -1, 50));
        pnlSearch.add(tfFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 290, 200, 50));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Đến");
        pnlSearch.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, -1, 50));
        pnlSearch.add(tfTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 290, 200, 50));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("TÌM KIẾM");
        pnlSearch.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 475, 50));

        btnRefresh.setText("Refresh");
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });
        pnlSearch.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, 40, 40));

        pnBody.add(pnlSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 475, 435));

        add(pnBody, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 1280, 520));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        // TODO add your handling code here:
        ArrayList<ImportDTO> filter =new ArrayList<>();
        String search = tfSearch.getText();
        long priceFrom =0;
        long priceTo =0;
        if( tfFrom.getText().length()>0){
            priceFrom = Long.parseLong(tfFrom.getText());
        }
        if( tfTo.getText().length()>0){
            priceTo = Long.parseLong(tfTo.getText());
        }
        boolean isExist=false;
        if(search.length()!=0 && cbTypeSearch.getSelectedIndex()==2)
        {
            for(int i=0;i<impList.size();i++){
                if(impList.get(i).getImportID().equals(search)
                        || impList.get(i).getEmployeeID().equals(search)
                        ){
                            isExist=false;
                            for(int j=0;j<filter.size();j++){
                                if(filter.get(j).getImportID().equals(impList.get(i).getImportID())) isExist=true;
                            }
                            if(!isExist) filter.add(impList.get(i));
                    }
                }
        }
        
        if(cbTypeSearch.getSelectedIndex()==1){
            if(tfFrom.getText().length()>0 && tfTo.getText().length()>0){
                if(search.length()==0){
                    for(int i=0;i<impList.size();i++){
                        if(impList.get(i).getTotalAmount()>=priceFrom && impList.get(i).getTotalAmount()<=priceTo){
                            filter.add(impList.get(i));
                        }
                    }
                }
                else {
                    for(int i=0;i<impList.size();i++){
                        if(impList.get(i).getTotalAmount()>=priceFrom && impList.get(i).getTotalAmount()<=priceTo && (impList.get(i).getImportID().equals(search) || impList.get(i).getEmployeeID().equals(search))){
                            filter.add(impList.get(i));
                        }
                    }
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập khoảng giá!");
            }
        }
         try {
                addRowtoImportTable(filter);
            } catch (SQLException ex) {
                Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        if(filter.isEmpty())  JOptionPane.showMessageDialog(null, "Không tìm thấy!");
    }//GEN-LAST:event_btnSearchMouseClicked

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
            try {
                // TODO add your handling code here:
                addRowtoImportTable(impList);
            } catch (SQLException ex) {
                Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnRefreshMouseClicked

    private void btnXemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnXemMouseClicked
        // TODO add your handling code here:
        int i=tblImport.getSelectedRow();
        ImportDTO tempDTO = new ImportDTO((String) tblImport.getModel().getValueAt(i, 0)
                ,(String) tblImport.getModel().getValueAt(i, 1)
                ,(long) tblImport.getModel().getValueAt(i, 2)
                ,(String) tblImport.getModel().getValueAt(i, 3)
        );
        
        new ImportDetailGUI(tempDTO).setVisible(true);
    }//GEN-LAST:event_btnXemMouseClicked
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.gui.SvgImage btnAdd;
    private com.gui.SvgImage btnRefresh;
    private com.gui.SvgImage btnSearch;
    private com.gui.SvgImage btnXem;
    private javax.swing.JComboBox<String> cbTypeSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnBody;
    private javax.swing.JPanel pnHeader;
    private javax.swing.JPanel pnToolBar;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JTable tblImport;
    private javax.swing.JTextField tfFrom;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfTo;
    // End of variables declaration//GEN-END:variables
}
